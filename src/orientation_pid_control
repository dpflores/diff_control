#!/usr/bin/env python3

# Orientation with PID control node for ROS Course 
# Author: Del Piero Flores
# File: orientation_pid_control

from turtle import distance
import rospy
from geometry_msgs.msg import Twist
from markers import *
from pid_controller import *
import os
import numpy as np



from nav_msgs.msg import Odometry
from tf.transformations import euler_from_quaternion, quaternion_from_euler


WAFFLE_MAX_LIN_VEL = 0.26
WAFFLE_MAX_ANG_VEL = 1.82

PLOTTING = True

msg = """
Running node
"""

e = """
Communications Failed
"""


x=0
y=0
x_d=0
y_d=0
phi=0
phi_d=0
t = 0
error = 0

POSITION_OUTPUT_FILE = os.path.dirname(os.path.realpath(__file__)) + "/data/position.txt"


#Subscriber functions
def on_odometry(msg):
  global x,y, phi, x_d, y_d, phi_d, t, error
  x = msg.pose.pose.position.x
  y = msg.pose.pose.position.y
  #phi = msg.pose.pose.orientation.z
  orientation_q = msg.pose.pose.orientation
  orientation_list = [orientation_q.x, orientation_q.y, orientation_q.z, orientation_q.w]
  (roll, pitch, yaw) = euler_from_quaternion(orientation_list)
  phi = yaw
  if PLOTTING == True:
    write_to_file(t, x_d, y_d, phi_d, x, y, phi, error)
  t+=1


# General functions
def clear_file(filename):
  file = open(filename,"w")
  file.close()


def write_to_file(t, xd, yd, phid, x, y, phi, error):

  with open(POSITION_OUTPUT_FILE, 'a') as file:
    file.write(str(t) + ", " + str(xd) + ", " + str(yd) + ", " + str(phid) + ", " + str(x) + ", " + str(y) + ", " + str(phi) + ", " + str(error) +"\n")
    file.close()
              
  #rospy.loginfo("Written positions")


def constrain(input, low, high):
    if input < low:
      input = low
    elif input > high:
      input = high
    else:
      input = input

    return input

def checkLinearLimitVelocity(vel):
    vel = constrain(vel, -WAFFLE_MAX_LIN_VEL, WAFFLE_MAX_LIN_VEL)
    return vel

def checkAngularLimitVelocity(vel):
    vel = constrain(vel, -WAFFLE_MAX_ANG_VEL, WAFFLE_MAX_ANG_VEL)
    return vel

def normalize_angle(angle):
  """
  Normalize an angle to [-pi, pi].
  :param angle: (float)
  :return: (float) Angle in radian in [-pi, pi]
  """
  if angle > np.pi:
      angle -= 2.0 * np.pi

  if angle < -np.pi:
      angle += 2.0 * np.pi

  return angle


# Main function
if __name__=="__main__":
    # Init node
    rospy.init_node('orientation_pid_control_node')

    # Publishers  // rospy.Publisher('topic_name', MessageType, queue_size=10)
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)

    # Subscribers  //  rospy.Subscriber('topic_name', MessageType, callback_function)
    rospy.Subscriber('odom', Odometry, on_odometry)

    # Declaration of Green marker
    bmarker = BallMarker(color['GREEN'])

    turtlebot3_model = rospy.get_param("model", "burger")
    
    # Init and clear files
    clear_file(POSITION_OUTPUT_FILE)
    

    # Loop rate (in Hz)
    rate = rospy.Rate(10)

    # Desired position and heading
    x_d = -5.0
    y_d = -15.0
    bmarker.xyz([x_d, y_d, 0.05])
    
    # Control Parameters
    Kp = 45.5
    Ki = 0.0
    Kd = 2.0
    
    Fs = 30 
    Ts = 1/Fs
    # PID Initialization
    pid = PIDController(Kp, Ki, Kd, Ts, -WAFFLE_MAX_ANG_VEL, WAFFLE_MAX_ANG_VEL)

    # try:
    print(msg)
    while not rospy.is_shutdown():
        
        distance = np.abs(np.sqrt((y_d-y)**2+(x_d-x)**2))
        # Linear speed constant
        linear_vel = 0.2*distance #0.1 #0.15

        # PID implementation of orientation control
        phi_d = np.arctan2((y_d-y),(x_d-x))
        alpha= phi_d - phi
        #error = alpha
        error = np.arctan2(np.sin(alpha),np.cos(alpha))

        angular_vel =  pid.control(error)
  
        #angular_vel = 0.5

      

        
        twist = Twist()

        
        twist.linear.x = checkLinearLimitVelocity(linear_vel); twist.linear.y = 0.0; twist.linear.z = 0.0

        
        twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = checkLinearLimitVelocity(angular_vel)
        
        pub.publish(twist)
        bmarker.publish()
        
        if distance<0.01:
          break

        rate.sleep()
        

    # except:
    #     print(e)

    # finally:
    twist = Twist()
    twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
    twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
    pub.publish(twist)