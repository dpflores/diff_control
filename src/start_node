#!/usr/bin/env python3

# First node for ROS Course 
# Author: Del Piero Flores
# File: start_node

import rospy
from geometry_msgs.msg import Twist
from markers import *



WAFFLE_MAX_LIN_VEL = 0.26
WAFFLE_MAX_ANG_VEL = 1.82


msg = """
Running node
"""

e = """
Communications Failed
"""


def constrain(input, low, high):
    if input < low:
      input = low
    elif input > high:
      input = high
    else:
      input = input

    return input

def checkLinearLimitVelocity(vel):
    vel = constrain(vel, -WAFFLE_MAX_LIN_VEL, WAFFLE_MAX_LIN_VEL)
    return vel

def checkAngularLimitVelocity(vel):
    vel = constrain(vel, -WAFFLE_MAX_ANG_VEL, WAFFLE_MAX_ANG_VEL)
    return vel

if __name__=="__main__":

    rospy.init_node('start_node')
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)
    bmarker = BallMarker(color['GREEN'])

    turtlebot3_model = rospy.get_param("model", "waffle")

    
    # Loop rate (in Hz)
    rate = rospy.Rate(100)

    bmarker.xyz([-2.5, 1.5, 0.05])
    
    try:
        print(msg)
        while not rospy.is_shutdown():
            

            linear_vel = 0.0
            angular_vel = 0

            
            twist = Twist()

            
            twist.linear.x = checkLinearLimitVelocity(linear_vel); twist.linear.y = 0.0; twist.linear.z = 0.0

            
            twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = checkLinearLimitVelocity(angular_vel)
            
            #pub.publish(twist)
            bmarker.publish()
            

    except:
        print(e)

    finally:
        twist = Twist()
        twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
        twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
        pub.publish(twist)